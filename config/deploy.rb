  # config valid only for Capistrano 3.1
lock '3.2.1'

set :application, 'hotwire'
set :repo_url, 'git@github.com:my_username/my_repo.git'
set :branch, "master"
set :deploy_to, '/var/www/app'
set :keep_releases, 3

namespace :deploy do

  desc 'Post Publish Stuff'
  after :publishing, :post_publish_stuff do
    on roles(:web), in: :sequence, wait: 5 do |host|

     @timestamp = Time.now.to_i
     @ping_url = "http://localhost/tools/checks/ping?t=#{@timestamp}"
     @reload_params = "reload=true&password=hotwire&t=#{@timestamp}"

      # delete files not meant for production
      execute "pwd"
      execute "rm #{release_path}/README.md"
      execute "rm #{release_path}/controllers/tools/Junify.cfc"
      execute "rm #{release_path}/controllers/seed/seed/developer.cfm"
      execute "rm #{release_path}/controllers/seed/seed/ci.cfm"
      execute "rm -r #{release_path}/src/"
      execute "rm -r #{release_path}/tests/"
      # plugins
      execute "rm #{release_path}/plugins/Scaffold-*.zip"
      execute "rm -r #{release_path}/plugins/Scaffold/"
      # capistrano stuff
      execute "rm #{release_path}/Capfile"
      execute "rm #{release_path}/config/deploy.rb"
      execute "rm -r #{release_path}/config/deploy/"
      execute "rm -r #{release_path}/lib/capistrano/"

      # build and cleanup all unwanted files
      if "#{host.properties.stage}" == "staging"
          #sudo "cp -rf /tmp/railo-server-staging.xml /usr/share/tomcat7/lib/railo-server/context/railo-server.xml"
          execute "rm -r #{release_path}/controllers/seed/seed/"
          execute "rm -r #{release_path}/controllers/seed/Seed.cfc"
      elsif "#{host.properties.stage}" == "production"
          #sudo "cp -rf /tmp/railo-server.xml /usr/share/tomcat7/lib/railo-server/context/railo-server.xml"
          execute "rm -r #{release_path}/controllers/seed/seed/"
          execute "rm -r #{release_path}/controllers/seed/Seed.cfc"
      end

      # s3 settings
      if "#{host.properties.stage}" == "production"
        # use the production s3 settings
        execute "mv -f #{release_path}/config/s3/production.cfm #{release_path}/config/s3.cfm"
      else
        # use the non-production s3 settings
        execute "mv -f #{release_path}/config/s3/staging.cfm #{release_path}/config/s3.cfm"
      end
      execute "rm -r #{release_path}/config/s3/"

      # ensure WEB-INF symlink exists
      execute "ln -s /var/www/app/shared/WEB-INF/ /var/www/app/current/"

      # restart tomcat & nginx services
      execute "echo 'Restarting services...'"
      sudo "fuser -k 80/tcp"
      sudo "/etc/init.d/nginx restart"
      execute "sleep 5"
      sudo "/etc/init.d/tomcat7 restart"
      sudo "sh /var/www/app/current/lib/bin/wait-for-tomcat.sh"

      # warm wheels after restart.. probably not necessary as the wait-for-tomcat.sh does some pinging
      execute "echo 'Warm up cfwheels...'"
      execute "curl -v '#{@ping_url}'"

      # make the release number available to wheels
      execute "echo -e '<cfset release = #{now}>' > /var/www/app/current/controllers/tools/release.cfm"
      # put into maintenance mode
      execute "echo 'Restart in maintenance mode...'"
      execute "echo -e '<cfset set(environment=\"maintenance\")>\n<cfset set(stage=\"#{host.properties.stage}\")>' > /var/www/app/current/config/environment.cfm"
      execute "curl -v '#{@ping_url}&#{@reload_params}'"

      # run dbmigrate
      execute "echo 'Migrate database...'"
      execute "curl 'http://localhost/tools/db/migrate?t=#{@timestamp}' >> #{release_path}/cap-deploy.log"
      # remove any sql files generated by the dbmigrate plugin
      sudo "rm -f #{release_path}/db/sql/*"

      # put into production mode
      execute "echo 'Restart in production mode...'"
      execute "echo -e '<cfset set(environment=\"production\")>\n<cfset set(stage=\"#{host.properties.stage}\")>' > /var/www/app/current/config/environment.cfm"
      execute "curl -v '#{@ping_url}&#{@reload_params}'"

      # check that db has been migrated to latest version (check that this returns {ismigrated:true})
      execute "[ \"`curl -v 'http://localhost/tools/db/migrations/ismigrated?t=#{@timestamp}' | grep '{ismigrated:true}'`\" != \"\" ] && echo 'Migrated okay!' || exit 1"

      # check that this release is working
      execute "[ \"`curl -v 'http://localhost/tools/checks/isreleased/#{now}?t=#{@timestamp}' | grep '{isreleased:true}'`\" != \"\" ] && echo 'Released okay!' || exit 1"

    end
  end

  desc 'Post Finished Stuff'
  after :finished, :confirm_release_number do
    on roles(:web), in: :sequence, wait: 5 do |host|

      @timestamp = Time.now.to_i

      # check that this release is working
      execute "[ \"`curl -v 'http://127.0.0.1/tools/checks/isreleased/#{now}?t=#{@timestamp}' | grep '{isreleased:true}'`\" != \"\" ] && echo 'Released okay!' || exit 1"

    end
  end

end
